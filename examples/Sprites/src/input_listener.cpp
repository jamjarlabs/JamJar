#include "input_listener.hpp"
#include "message/message_payload.hpp"
#include "standard/sdl2_input/sdl2_input_system.hpp"
#include <SDL2/SDL.h>
#include <iostream>

InputListener::InputListener(JamJar::MessageBus *messageBus) : JamJar::System(messageBus) {
    this->messageBus->Subscribe(this, JamJar::Standard::SDL2InputSystem::MESSAGE_KEY_DOWN_EVENT);
    this->messageBus->Subscribe(this, JamJar::Standard::SDL2InputSystem::MESSAGE_KEY_UP_EVENT);
    this->messageBus->Subscribe(this, JamJar::Standard::SDL2InputSystem::MESSAGE_MOUSE_BUTTON_UP_EVENT);
    this->messageBus->Subscribe(this, JamJar::Standard::SDL2InputSystem::MESSAGE_MOUSE_BUTTON_DOWN_EVENT);
    this->messageBus->Subscribe(this, JamJar::Standard::SDL2InputSystem::MESSAGE_MOUSE_MOTION_EVENT);
    this->messageBus->Subscribe(this, JamJar::Standard::SDL2InputSystem::MESSAGE_MOUSE_WHEEL_EVENT);
}

void InputListener::OnMessage(JamJar::Message *message) {
    System::OnMessage(message);
    switch (message->type) {
    case JamJar::Standard::SDL2InputSystem::MESSAGE_KEY_DOWN_EVENT: {
        auto *eventMessage = static_cast<JamJar::MessagePayload<JamJar::Standard::SDL2KeyEvent> *>(message);
        auto event = eventMessage->payload;
        if (event.repeat) {
            // Ignore repeat keypresses (generated by SDL2 to help holding down a key meaning multiple inputs, useful
            // for text input)
            break;
        }
        std::cout << "listener got key down: " << event.key << std::endl;
        break;
    }
    case JamJar::Standard::SDL2InputSystem::MESSAGE_KEY_UP_EVENT: {
        auto *eventMessage = static_cast<JamJar::MessagePayload<JamJar::Standard::SDL2KeyEvent> *>(message);
        auto event = eventMessage->payload;
        if (event.repeat) {
            // Ignore repeat keypresses
            break;
        }
        std::cout << "listener got key up: " << event.key << std::endl;
        break;
    }
    case JamJar::Standard::SDL2InputSystem::MESSAGE_MOUSE_BUTTON_DOWN_EVENT: {
        auto *eventMessage = static_cast<JamJar::MessagePayload<JamJar::Standard::SDL2MouseEvent> *>(message);
        auto event = eventMessage->payload;
        if (event.button == JamJar::Standard::SDL2MouseButton::LEFT) {
            std::cout << "listener got left mouse button down" << std::endl;
        } else if (event.button == JamJar::Standard::SDL2MouseButton::RIGHT) {
            std::cout << "listener got right mouse button down" << std::endl;
        } else {
            std::cout << "listener got a different mouse button down" << std::endl;
        }
        break;
    }
    case JamJar::Standard::SDL2InputSystem::MESSAGE_MOUSE_BUTTON_UP_EVENT: {
        auto *eventMessage = static_cast<JamJar::MessagePayload<JamJar::Standard::SDL2MouseEvent> *>(message);
        auto event = eventMessage->payload;
        if (event.button == JamJar::Standard::SDL2MouseButton::LEFT) {
            std::cout << "listener got left mouse button up" << std::endl;
        } else if (event.button == JamJar::Standard::SDL2MouseButton::RIGHT) {
            std::cout << "listener got right mouse button up" << std::endl;
        } else {
            std::cout << "listener got a different mouse button up" << std::endl;
        }
        break;
    }
    case JamJar::Standard::SDL2InputSystem::MESSAGE_MOUSE_WHEEL_EVENT: {
        auto *eventMessage = static_cast<JamJar::MessagePayload<JamJar::Standard::SDL2MouseEvent> *>(message);
        auto event = eventMessage->payload;
        if (event.event.wheel.y > 0) {
            std::cout << "mouse wheel up" << std::endl;
        } else if (event.event.wheel.y < 0) {
            std::cout << "mouse wheel down" << std::endl;
        }
        break;
    }
    }
}
